.MODEL SMALL
.STACK 100H
.DATA
MSG DB "ENTER HEX NUMBER: $"
.CODE

MAIN PROC
    MOV AX, @DATA
    MOV DS, AX
    LEA DX, MSG
    MOV AH, 09H
    INT 21H

    XOR BX, BX
    MOV CL, 4
    MOV AH, 01H
    INT 21H

WHILE_:
    CMP AL, 0DH
    JE SHOW
    CMP AL, 39H      ; CHECK IF THE INPUT NUMBER IS DIGIT
    JG LETTER
    ;INPUT IS A DIGIT
    AND AL, 0FH      ; CONVERT DIGIT TO BINARY BIT
    JMP SHIFT

LETTER:
    SUB AL, 37H      ; CONVERT LETTER TO BINARY BIT

SHIFT:
    SHL BX, CL
    OR BL, AL
    INT 21H
    JMP WHILE_

SHOW:
    MOV AH, 02H
    MOV DL, 0DH
    INT 21H
    MOV DL, 0AH
    INT 21H
    CALL DISPLAY
    JMP EXIT

EXIT:
    MOV AH, 4CH
    INT 21H
MAIN ENDP

DISPLAY PROC
    MOV CX, 4           ; 4 hex digits in 16-bit number

NEXT_DIGIT:
    MOV AX, BX          ; COPY BX TO AX
    SHR AX, 12          ; SHIFT RIGHT TO PLACE HEX DIGIT IN LOW NIBBLE (AL)

    ; NOW AL CONTAINS ONE HEX DIGIT (0–15)
    CMP AL, 9
    JG LETTER_HEX       ; IF > 9, IT'S A LETTER (A–F)

    ADD AL, '0'         ; CONVERT 0–9 TO ASCII
    JMP PRINT_HEX

LETTER_HEX:
    ADD AL, 55          ; CONVERT 10–15 TO ASCII ('A'–'F')

PRINT_HEX:
    MOV DL, AL
    MOV AH, 02H
    INT 21H

    SHL BX, 4           ; MOVE NEXT HEX DIGIT TO MSB FOR NEXT ROUND
    LOOP NEXT_DIGIT
    RET
DISPLAY ENDP

END MAIN
    MOV DL, 0AH
    INT 21H
    CALL DISPLAY
    JMP EXIT
    
    EXIT:
    MOV AH, 4CH
    INT 21H
    MAIN ENDP
END MAINENDP

END MAIN
